class Solution {
    public void fillSurrounded(char[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        
        for (int i = 0; i < n; i++) {
            if (mat[i][0] == 'O') dfs(mat, i, 0, n, m);
            if (mat[i][m - 1] == 'O') dfs(mat, i, m - 1, n, m);
        }
        for (int j = 0; j < m; j++) {
            if (mat[0][j] == 'O') dfs(mat, 0, j, n, m);
            if (mat[n - 1][j] == 'O') dfs(mat, n - 1, j, n, m);
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 'O') mat[i][j] = 'X';
                else if (mat[i][j] == '#') mat[i][j] = 'O';
            }
        }
    }

    private void dfs(char[][] mat, int i, int j, int n, int m) {
        if (i < 0 || i >= n || j < 0 || j >= m || mat[i][j] != 'O') return;
        mat[i][j] = '#'; 
        dfs(mat, i + 1, j, n, m);
        dfs(mat, i - 1, j, n, m);
        dfs(mat, i, j + 1, n, m);
        dfs(mat, i, j - 1, n, m);
    }
}