import java.util.*;

class Solution {
    public int minimumSteps(int n) {
        if (n == 1) return 0;

        Queue<int[]> q = new LinkedList<>();
        boolean[] visited = new boolean[n + 1];

        q.add(new int[]{1, 0});
        visited[1] = true;

        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int node = curr[0], dist = curr[1];

            if (node == n) return dist;

            if (node + 1 <= n && !visited[node + 1]) {
                visited[node + 1] = true;
                q.add(new int[]{node + 1, dist + 1});
            }
            if (node * 3 <= n && !visited[node * 3]) {
                visited[node * 3] = true;
                q.add(new int[]{node * 3, dist + 1});
            }
        }
        return -1;
    }
}