import java.util.*;

class Solution {
    public boolean isPath(int[][] grid) {
        int n = grid.length;
        int[] src = new int[2], dest = new int[2];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    src[0] = i; src[1] = j;
                }
                if (grid[i][j] == 2) {
                    dest[0] = i; dest[1] = j;
                }
            }
        }

        Queue<int[]> q = new LinkedList<>();
        boolean[][] visited = new boolean[n][n];
        q.offer(src);
        visited[src[0]][src[1]] = true;

        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};

        while (!q.isEmpty()) {
            int[] cell = q.poll();
            int r = cell[0], c = cell[1];

            if (r == dest[0] && c == dest[1]) return true;

            for (int[] d : dirs) {
                int nr = r + d[0], nc = c + d[1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < n 
                    && !visited[nr][nc] && (grid[nr][nc] == 2 || grid[nr][nc] == 3)) {
                    visited[nr][nc] = true;
                    q.offer(new int[]{nr, nc});
                }
            }
        }
        return false;
    }
}